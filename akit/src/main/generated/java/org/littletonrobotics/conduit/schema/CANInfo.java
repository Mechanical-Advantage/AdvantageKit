// automatically generated by the FlatBuffers compiler, do not modify

package org.littletonrobotics.conduit.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CANInfo extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CANInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double maxBandwidthMbps() { return bb.getDouble(bb_pos + 0); }
  public void mutateMaxBandwidthMbps(double max_bandwidth_mbps) { bb.putDouble(bb_pos + 0, max_bandwidth_mbps); }
  public boolean isFd() { return 0!=bb.get(bb_pos + 8); }
  public void mutateIsFd(boolean is_fd) { bb.put(bb_pos + 8, (byte)(is_fd ? 1 : 0)); }
  public boolean isAvailable() { return 0!=bb.get(bb_pos + 9); }
  public void mutateIsAvailable(boolean is_available) { bb.put(bb_pos + 9, (byte)(is_available ? 1 : 0)); }
  public boolean isUp() { return 0!=bb.get(bb_pos + 10); }
  public void mutateIsUp(boolean is_up) { bb.put(bb_pos + 10, (byte)(is_up ? 1 : 0)); }

  public static int createCANInfo(FlatBufferBuilder builder, double maxBandwidthMbps, boolean isFd, boolean isAvailable, boolean isUp) {
    builder.prep(8, 16);
    builder.pad(5);
    builder.putBoolean(isUp);
    builder.putBoolean(isAvailable);
    builder.putBoolean(isFd);
    builder.putDouble(maxBandwidthMbps);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CANInfo get(int j) { return get(new CANInfo(), j); }
    public CANInfo get(CANInfo obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

