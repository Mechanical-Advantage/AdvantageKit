// automatically generated by the FlatBuffers compiler, do not modify

package org.littletonrobotics.conduit.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CoreInputs extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CoreInputs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamp() { return bb.getLong(bb_pos + 0); }
  public void mutateTimestamp(long timestamp) { bb.putLong(bb_pos + 0, timestamp); }
  public org.littletonrobotics.conduit.schema.DSData ds() { return ds(new org.littletonrobotics.conduit.schema.DSData()); }
  public org.littletonrobotics.conduit.schema.DSData ds(org.littletonrobotics.conduit.schema.DSData obj) { return obj.__assign(bb_pos + 8, bb); }
  public org.littletonrobotics.conduit.schema.PDPData pdp() { return pdp(new org.littletonrobotics.conduit.schema.PDPData()); }
  public org.littletonrobotics.conduit.schema.PDPData pdp(org.littletonrobotics.conduit.schema.PDPData obj) { return obj.__assign(bb_pos + 2208, bb); }
  public org.littletonrobotics.conduit.schema.SystemData sys() { return sys(new org.littletonrobotics.conduit.schema.SystemData()); }
  public org.littletonrobotics.conduit.schema.SystemData sys(org.littletonrobotics.conduit.schema.SystemData obj) { return obj.__assign(bb_pos + 2464, bb); }

  public static int createCoreInputs(FlatBufferBuilder builder, long timestamp, int ds_allianceStation, int[] ds_eventName, int ds_gameSpecificMessageSize, int[] ds_gameSpecificMessage, int ds_matchNumber, int ds_replayNumber, int ds_matchType, int ds_controlWord, double ds_matchTime, int[][] ds_joysticks_name, int[] ds_joysticks_type, short[] ds_joysticks_axisCount, int[][] ds_joysticks_axisTypes, float[][] ds_joysticks_axisValues, int[] ds_joysticks_buttonCount, int[] ds_joysticks_buttons, short[] ds_joysticks_povCount, int[][] ds_joysticks_povValues, boolean[] ds_joysticks_isGamepad, int pdp_handle, int pdp_channelCount, int pdp_type, int pdp_moduleId, long pdp_faults, long pdp_stickyFaults, double pdp_temperature, double pdp_voltage, double[] pdp_channelCurrent, double pdp_totalCurrent, double pdp_totalPower, double pdp_totalEnergy, double sys_batteryVoltage, boolean sys_watchdogActive, long sys_ioFrequency, long sys_teamNumber, long sys_epochTime, long sys_network_ethernet_rx_bandwidthKbps, long sys_network_ethernet_rx_bytes, long sys_network_ethernet_rx_dropped, long sys_network_ethernet_rx_errors, long sys_network_ethernet_rx_packets, long sys_network_ethernet_tx_bandwidthKbps, long sys_network_ethernet_tx_bytes, long sys_network_ethernet_tx_dropped, long sys_network_ethernet_tx_errors, long sys_network_ethernet_tx_packets, long sys_network_wifi_rx_bandwidthKbps, long sys_network_wifi_rx_bytes, long sys_network_wifi_rx_dropped, long sys_network_wifi_rx_errors, long sys_network_wifi_rx_packets, long sys_network_wifi_tx_bandwidthKbps, long sys_network_wifi_tx_bytes, long sys_network_wifi_tx_dropped, long sys_network_wifi_tx_errors, long sys_network_wifi_tx_packets, long sys_network_usb_tether_rx_bandwidthKbps, long sys_network_usb_tether_rx_bytes, long sys_network_usb_tether_rx_dropped, long sys_network_usb_tether_rx_errors, long sys_network_usb_tether_rx_packets, long sys_network_usb_tether_tx_bandwidthKbps, long sys_network_usb_tether_tx_bytes, long sys_network_usb_tether_tx_dropped, long sys_network_usb_tether_tx_errors, long sys_network_usb_tether_tx_packets, long[] sys_network_can_rx_bandwidthKbps, long[] sys_network_can_rx_bytes, long[] sys_network_can_rx_dropped, long[] sys_network_can_rx_errors, long[] sys_network_can_rx_packets, long[] sys_network_can_tx_bandwidthKbps, long[] sys_network_can_tx_bytes, long[] sys_network_can_tx_dropped, long[] sys_network_can_tx_errors, long[] sys_network_can_tx_packets, double sys_cpuPercent, double sys_cpuTemp, long sys_memoryUsageBytes, long sys_memoryTotalBytes, double sys_memoryPercent, long sys_storageUsageBytes, long sys_storageTotalBytes, double sys_storagePercent, double sys_imu_accel_raw_x, double sys_imu_accel_raw_y, double sys_imu_accel_raw_z, double sys_imu_gyro_rates_x, double sys_imu_gyro_rates_y, double sys_imu_gyro_rates_z, double sys_imu_gyro_euler_flat_x, double sys_imu_gyro_euler_flat_y, double sys_imu_gyro_euler_flat_z, double sys_imu_gyro_euler_landscape_x, double sys_imu_gyro_euler_landscape_y, double sys_imu_gyro_euler_landscape_z, double sys_imu_gyro_euler_portrait_x, double sys_imu_gyro_euler_portrait_y, double sys_imu_gyro_euler_portrait_z, double sys_imu_gyro_quaternion_w, double sys_imu_gyro_quaternion_x, double sys_imu_gyro_quaternion_y, double sys_imu_gyro_quaternion_z, double sys_imuGyroYawFlat, double sys_imuGyroYawLandscape, double sys_imuGyroYawPortrait) {
    builder.prep(8, 3384);
    builder.prep(8, 920);
    builder.putDouble(sys_imuGyroYawPortrait);
    builder.putDouble(sys_imuGyroYawLandscape);
    builder.putDouble(sys_imuGyroYawFlat);
    builder.prep(8, 32);
    builder.putDouble(sys_imu_gyro_quaternion_z);
    builder.putDouble(sys_imu_gyro_quaternion_y);
    builder.putDouble(sys_imu_gyro_quaternion_x);
    builder.putDouble(sys_imu_gyro_quaternion_w);
    builder.prep(8, 24);
    builder.putDouble(sys_imu_gyro_euler_portrait_z);
    builder.putDouble(sys_imu_gyro_euler_portrait_y);
    builder.putDouble(sys_imu_gyro_euler_portrait_x);
    builder.prep(8, 24);
    builder.putDouble(sys_imu_gyro_euler_landscape_z);
    builder.putDouble(sys_imu_gyro_euler_landscape_y);
    builder.putDouble(sys_imu_gyro_euler_landscape_x);
    builder.prep(8, 24);
    builder.putDouble(sys_imu_gyro_euler_flat_z);
    builder.putDouble(sys_imu_gyro_euler_flat_y);
    builder.putDouble(sys_imu_gyro_euler_flat_x);
    builder.prep(8, 24);
    builder.putDouble(sys_imu_gyro_rates_z);
    builder.putDouble(sys_imu_gyro_rates_y);
    builder.putDouble(sys_imu_gyro_rates_x);
    builder.prep(8, 24);
    builder.putDouble(sys_imu_accel_raw_z);
    builder.putDouble(sys_imu_accel_raw_y);
    builder.putDouble(sys_imu_accel_raw_x);
    builder.putDouble(sys_storagePercent);
    builder.putLong(sys_storageTotalBytes);
    builder.putLong(sys_storageUsageBytes);
    builder.putDouble(sys_memoryPercent);
    builder.putLong(sys_memoryTotalBytes);
    builder.putLong(sys_memoryUsageBytes);
    builder.putDouble(sys_cpuTemp);
    builder.putDouble(sys_cpuPercent);
    for (int _idx0 = 5; _idx0 > 0; _idx0--) {
      builder.prep(8, 80);
      builder.prep(8, 40);
      builder.putLong(sys_network_can_tx_packets[_idx0-1]);
      builder.putLong(sys_network_can_tx_errors[_idx0-1]);
      builder.putLong(sys_network_can_tx_dropped[_idx0-1]);
      builder.putLong(sys_network_can_tx_bytes[_idx0-1]);
      builder.putLong(sys_network_can_tx_bandwidthKbps[_idx0-1]);
      builder.prep(8, 40);
      builder.putLong(sys_network_can_rx_packets[_idx0-1]);
      builder.putLong(sys_network_can_rx_errors[_idx0-1]);
      builder.putLong(sys_network_can_rx_dropped[_idx0-1]);
      builder.putLong(sys_network_can_rx_bytes[_idx0-1]);
      builder.putLong(sys_network_can_rx_bandwidthKbps[_idx0-1]);
    }
    builder.prep(8, 80);
    builder.prep(8, 40);
    builder.putLong(sys_network_usb_tether_tx_packets);
    builder.putLong(sys_network_usb_tether_tx_errors);
    builder.putLong(sys_network_usb_tether_tx_dropped);
    builder.putLong(sys_network_usb_tether_tx_bytes);
    builder.putLong(sys_network_usb_tether_tx_bandwidthKbps);
    builder.prep(8, 40);
    builder.putLong(sys_network_usb_tether_rx_packets);
    builder.putLong(sys_network_usb_tether_rx_errors);
    builder.putLong(sys_network_usb_tether_rx_dropped);
    builder.putLong(sys_network_usb_tether_rx_bytes);
    builder.putLong(sys_network_usb_tether_rx_bandwidthKbps);
    builder.prep(8, 80);
    builder.prep(8, 40);
    builder.putLong(sys_network_wifi_tx_packets);
    builder.putLong(sys_network_wifi_tx_errors);
    builder.putLong(sys_network_wifi_tx_dropped);
    builder.putLong(sys_network_wifi_tx_bytes);
    builder.putLong(sys_network_wifi_tx_bandwidthKbps);
    builder.prep(8, 40);
    builder.putLong(sys_network_wifi_rx_packets);
    builder.putLong(sys_network_wifi_rx_errors);
    builder.putLong(sys_network_wifi_rx_dropped);
    builder.putLong(sys_network_wifi_rx_bytes);
    builder.putLong(sys_network_wifi_rx_bandwidthKbps);
    builder.prep(8, 80);
    builder.prep(8, 40);
    builder.putLong(sys_network_ethernet_tx_packets);
    builder.putLong(sys_network_ethernet_tx_errors);
    builder.putLong(sys_network_ethernet_tx_dropped);
    builder.putLong(sys_network_ethernet_tx_bytes);
    builder.putLong(sys_network_ethernet_tx_bandwidthKbps);
    builder.prep(8, 40);
    builder.putLong(sys_network_ethernet_rx_packets);
    builder.putLong(sys_network_ethernet_rx_errors);
    builder.putLong(sys_network_ethernet_rx_dropped);
    builder.putLong(sys_network_ethernet_rx_bytes);
    builder.putLong(sys_network_ethernet_rx_bandwidthKbps);
    builder.putLong(sys_epochTime);
    builder.putLong(sys_teamNumber);
    builder.putLong(sys_ioFrequency);
    builder.pad(7);
    builder.putBoolean(sys_watchdogActive);
    builder.putDouble(sys_batteryVoltage);
    builder.prep(8, 256);
    builder.putDouble(pdp_totalEnergy);
    builder.putDouble(pdp_totalPower);
    builder.putDouble(pdp_totalCurrent);
    for (int _idx0 = 24; _idx0 > 0; _idx0--) {
      builder.putDouble(pdp_channelCurrent[_idx0-1]);
    }
    builder.putDouble(pdp_voltage);
    builder.putDouble(pdp_temperature);
    builder.putInt((int) pdp_stickyFaults);
    builder.putInt((int) pdp_faults);
    builder.putInt(pdp_moduleId);
    builder.putInt(pdp_type);
    builder.putInt(pdp_channelCount);
    builder.putInt(pdp_handle);
    builder.prep(8, 2200);
    for (int _idx0 = 6; _idx0 > 0; _idx0--) {
      builder.prep(4, 340);
      builder.pad(1);
      builder.putBoolean(ds_joysticks_isGamepad[_idx0-1]);
      for (int _idx1 = 8; _idx1 > 0; _idx1--) {
        builder.putByte((byte) ds_joysticks_povValues[_idx0-1][_idx1-1]);
      }
      builder.putShort(ds_joysticks_povCount[_idx0-1]);
      builder.putInt(ds_joysticks_buttons[_idx0-1]);
      builder.pad(3);
      builder.putByte((byte) ds_joysticks_buttonCount[_idx0-1]);
      for (int _idx1 = 12; _idx1 > 0; _idx1--) {
        builder.putFloat(ds_joysticks_axisValues[_idx0-1][_idx1-1]);
      }
      for (int _idx1 = 12; _idx1 > 0; _idx1--) {
        builder.putByte((byte) ds_joysticks_axisTypes[_idx0-1][_idx1-1]);
      }
      builder.putShort(ds_joysticks_axisCount[_idx0-1]);
      builder.pad(1);
      builder.putByte((byte) ds_joysticks_type[_idx0-1]);
      for (int _idx1 = 256; _idx1 > 0; _idx1--) {
        builder.putByte((byte) ds_joysticks_name[_idx0-1][_idx1-1]);
      }
    }
    builder.putDouble(ds_matchTime);
    builder.pad(4);
    builder.putInt(ds_controlWord);
    builder.putInt(ds_matchType);
    builder.pad(3);
    builder.putByte((byte) ds_replayNumber);
    builder.putShort((short) ds_matchNumber);
    for (int _idx0 = 64; _idx0 > 0; _idx0--) {
      builder.putByte((byte) ds_gameSpecificMessage[_idx0-1]);
    }
    builder.putShort((short) ds_gameSpecificMessageSize);
    for (int _idx0 = 64; _idx0 > 0; _idx0--) {
      builder.putByte((byte) ds_eventName[_idx0-1]);
    }
    builder.putInt(ds_allianceStation);
    builder.putLong(timestamp);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CoreInputs get(int j) { return get(new CoreInputs(), j); }
    public CoreInputs get(CoreInputs obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

