// automatically generated by the FlatBuffers compiler, do not modify

package org.littletonrobotics.conduit.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Joystick extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Joystick __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int name(int j) { return bb.get(bb_pos + 0 + j * 1); }
  public void mutateName(int j, int name) { bb.put(bb_pos + 0 + j * 1, (byte) name); }
  public int type() { return bb.get(bb_pos + 256) & 0xFF; }
  public void mutateType(int type) { bb.put(bb_pos + 256, (byte) type); }
  public short axisCount() { return bb.getShort(bb_pos + 258); }
  public void mutateAxisCount(short axis_count) { bb.putShort(bb_pos + 258, axis_count); }
  public int axisTypes(int j) { return bb.get(bb_pos + 260 + j * 1); }
  public void mutateAxisTypes(int j, int axis_types) { bb.put(bb_pos + 260 + j * 1, (byte) axis_types); }
  public float axisValues(int j) { return bb.getFloat(bb_pos + 272 + j * 4); }
  public void mutateAxisValues(int j, float axis_values) { bb.putFloat(bb_pos + 272 + j * 4, axis_values); }
  public int buttonCount() { return bb.get(bb_pos + 320) & 0xFF; }
  public void mutateButtonCount(int button_count) { bb.put(bb_pos + 320, (byte) button_count); }
  public int buttons() { return bb.getInt(bb_pos + 324); }
  public void mutateButtons(int buttons) { bb.putInt(bb_pos + 324, buttons); }
  public short povCount() { return bb.getShort(bb_pos + 328); }
  public void mutatePovCount(short pov_count) { bb.putShort(bb_pos + 328, pov_count); }
  public int povValues(int j) { return bb.get(bb_pos + 330 + j * 1); }
  public void mutatePovValues(int j, int pov_values) { bb.put(bb_pos + 330 + j * 1, (byte) pov_values); }
  public boolean isGamepad() { return 0!=bb.get(bb_pos + 338); }
  public void mutateIsGamepad(boolean is_gamepad) { bb.put(bb_pos + 338, (byte)(is_gamepad ? 1 : 0)); }

  public static int createJoystick(FlatBufferBuilder builder, int[] name, int type, short axisCount, int[] axisTypes, float[] axisValues, int buttonCount, int buttons, short povCount, int[] povValues, boolean isGamepad) {
    builder.prep(4, 340);
    builder.pad(1);
    builder.putBoolean(isGamepad);
    for (int _idx0 = 8; _idx0 > 0; _idx0--) {
      builder.putByte((byte) povValues[_idx0-1]);
    }
    builder.putShort(povCount);
    builder.putInt(buttons);
    builder.pad(3);
    builder.putByte((byte) buttonCount);
    for (int _idx0 = 12; _idx0 > 0; _idx0--) {
      builder.putFloat(axisValues[_idx0-1]);
    }
    for (int _idx0 = 12; _idx0 > 0; _idx0--) {
      builder.putByte((byte) axisTypes[_idx0-1]);
    }
    builder.putShort(axisCount);
    builder.pad(1);
    builder.putByte((byte) type);
    for (int _idx0 = 256; _idx0 > 0; _idx0--) {
      builder.putByte((byte) name[_idx0-1]);
    }
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Joystick get(int j) { return get(new Joystick(), j); }
    public Joystick get(Joystick obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

