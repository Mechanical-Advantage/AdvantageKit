// automatically generated by the FlatBuffers compiler, do not modify

package org.littletonrobotics.conduit.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SystemData extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SystemData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double batteryVoltage() { return bb.getDouble(bb_pos + 0); }
  public void mutateBatteryVoltage(double battery_voltage) { bb.putDouble(bb_pos + 0, battery_voltage); }
  public boolean watchdogActive() { return 0!=bb.get(bb_pos + 8); }
  public void mutateWatchdogActive(boolean watchdog_active) { bb.put(bb_pos + 8, (byte)(watchdog_active ? 1 : 0)); }
  public double canBandwidth(int j) { return bb.getDouble(bb_pos + 16 + j * 8); }
  public void mutateCanBandwidth(int j, double can_bandwidth) { bb.putDouble(bb_pos + 16 + j * 8, can_bandwidth); }
  public long ioFrequency() { return bb.getLong(bb_pos + 56); }
  public void mutateIoFrequency(long io_frequency) { bb.putLong(bb_pos + 56, io_frequency); }
  public long teamNumber() { return bb.getLong(bb_pos + 64); }
  public void mutateTeamNumber(long team_number) { bb.putLong(bb_pos + 64, team_number); }
  public long epochTime() { return bb.getLong(bb_pos + 72); }
  public void mutateEpochTime(long epoch_time) { bb.putLong(bb_pos + 72, epoch_time); }
  public double cpuPercent() { return bb.getDouble(bb_pos + 80); }
  public void mutateCpuPercent(double cpu_percent) { bb.putDouble(bb_pos + 80, cpu_percent); }
  public double cpuTemp() { return bb.getDouble(bb_pos + 88); }
  public void mutateCpuTemp(double cpu_temp) { bb.putDouble(bb_pos + 88, cpu_temp); }
  public long memoryUsageBytes() { return bb.getLong(bb_pos + 96); }
  public void mutateMemoryUsageBytes(long memory_usage_bytes) { bb.putLong(bb_pos + 96, memory_usage_bytes); }
  public long memoryTotalBytes() { return bb.getLong(bb_pos + 104); }
  public void mutateMemoryTotalBytes(long memory_total_bytes) { bb.putLong(bb_pos + 104, memory_total_bytes); }
  public double memoryPercent() { return bb.getDouble(bb_pos + 112); }
  public void mutateMemoryPercent(double memory_percent) { bb.putDouble(bb_pos + 112, memory_percent); }
  public long storageUsageBytes() { return bb.getLong(bb_pos + 120); }
  public void mutateStorageUsageBytes(long storage_usage_bytes) { bb.putLong(bb_pos + 120, storage_usage_bytes); }
  public long storageTotalBytes() { return bb.getLong(bb_pos + 128); }
  public void mutateStorageTotalBytes(long storage_total_bytes) { bb.putLong(bb_pos + 128, storage_total_bytes); }
  public double storagePercent() { return bb.getDouble(bb_pos + 136); }
  public void mutateStoragePercent(double storage_percent) { bb.putDouble(bb_pos + 136, storage_percent); }
  public org.littletonrobotics.conduit.schema.Vector3 imuAccelRaw() { return imuAccelRaw(new org.littletonrobotics.conduit.schema.Vector3()); }
  public org.littletonrobotics.conduit.schema.Vector3 imuAccelRaw(org.littletonrobotics.conduit.schema.Vector3 obj) { return obj.__assign(bb_pos + 144, bb); }
  public org.littletonrobotics.conduit.schema.Vector3 imuGyroRates() { return imuGyroRates(new org.littletonrobotics.conduit.schema.Vector3()); }
  public org.littletonrobotics.conduit.schema.Vector3 imuGyroRates(org.littletonrobotics.conduit.schema.Vector3 obj) { return obj.__assign(bb_pos + 168, bb); }
  public org.littletonrobotics.conduit.schema.Vector3 imuGyroEuler() { return imuGyroEuler(new org.littletonrobotics.conduit.schema.Vector3()); }
  public org.littletonrobotics.conduit.schema.Vector3 imuGyroEuler(org.littletonrobotics.conduit.schema.Vector3 obj) { return obj.__assign(bb_pos + 192, bb); }
  public org.littletonrobotics.conduit.schema.Vector4 imuGyroQuaternion() { return imuGyroQuaternion(new org.littletonrobotics.conduit.schema.Vector4()); }
  public org.littletonrobotics.conduit.schema.Vector4 imuGyroQuaternion(org.littletonrobotics.conduit.schema.Vector4 obj) { return obj.__assign(bb_pos + 216, bb); }
  public double imuGyroYawFlat() { return bb.getDouble(bb_pos + 248); }
  public void mutateImuGyroYawFlat(double imu_gyro_yaw_flat) { bb.putDouble(bb_pos + 248, imu_gyro_yaw_flat); }
  public double imuGyroYawLandscape() { return bb.getDouble(bb_pos + 256); }
  public void mutateImuGyroYawLandscape(double imu_gyro_yaw_landscape) { bb.putDouble(bb_pos + 256, imu_gyro_yaw_landscape); }
  public double imuGyroYawPortrait() { return bb.getDouble(bb_pos + 264); }
  public void mutateImuGyroYawPortrait(double imu_gyro_yaw_portrait) { bb.putDouble(bb_pos + 264, imu_gyro_yaw_portrait); }

  public static int createSystemData(FlatBufferBuilder builder, double batteryVoltage, boolean watchdogActive, double[] canBandwidth, long ioFrequency, long teamNumber, long epochTime, double cpuPercent, double cpuTemp, long memoryUsageBytes, long memoryTotalBytes, double memoryPercent, long storageUsageBytes, long storageTotalBytes, double storagePercent, double imu_accel_raw_x, double imu_accel_raw_y, double imu_accel_raw_z, double imu_gyro_rates_x, double imu_gyro_rates_y, double imu_gyro_rates_z, double imu_gyro_euler_x, double imu_gyro_euler_y, double imu_gyro_euler_z, double imu_gyro_quaternion_w, double imu_gyro_quaternion_x, double imu_gyro_quaternion_y, double imu_gyro_quaternion_z, double imuGyroYawFlat, double imuGyroYawLandscape, double imuGyroYawPortrait) {
    builder.prep(8, 272);
    builder.putDouble(imuGyroYawPortrait);
    builder.putDouble(imuGyroYawLandscape);
    builder.putDouble(imuGyroYawFlat);
    builder.prep(8, 32);
    builder.putDouble(imu_gyro_quaternion_z);
    builder.putDouble(imu_gyro_quaternion_y);
    builder.putDouble(imu_gyro_quaternion_x);
    builder.putDouble(imu_gyro_quaternion_w);
    builder.prep(8, 24);
    builder.putDouble(imu_gyro_euler_z);
    builder.putDouble(imu_gyro_euler_y);
    builder.putDouble(imu_gyro_euler_x);
    builder.prep(8, 24);
    builder.putDouble(imu_gyro_rates_z);
    builder.putDouble(imu_gyro_rates_y);
    builder.putDouble(imu_gyro_rates_x);
    builder.prep(8, 24);
    builder.putDouble(imu_accel_raw_z);
    builder.putDouble(imu_accel_raw_y);
    builder.putDouble(imu_accel_raw_x);
    builder.putDouble(storagePercent);
    builder.putLong(storageTotalBytes);
    builder.putLong(storageUsageBytes);
    builder.putDouble(memoryPercent);
    builder.putLong(memoryTotalBytes);
    builder.putLong(memoryUsageBytes);
    builder.putDouble(cpuTemp);
    builder.putDouble(cpuPercent);
    builder.putLong(epochTime);
    builder.putLong(teamNumber);
    builder.putLong(ioFrequency);
    for (int _idx0 = 5; _idx0 > 0; _idx0--) {
      builder.putDouble(canBandwidth[_idx0-1]);
    }
    builder.pad(7);
    builder.putBoolean(watchdogActive);
    builder.putDouble(batteryVoltage);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SystemData get(int j) { return get(new SystemData(), j); }
    public SystemData get(SystemData obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

